<?php
/* vim: set noai expandtab tabstop=4 softtabstop=4 shiftwidth=4: */
/**
 * System_Daemon turns PHP-CLI scripts into daemons.
 * 
 * PHP version 5
 *
 * @category  System
 * @package   System_Daemon
 * @author    Kevin <kevin@vanzonneveld.net>
 * @copyright 2008 Kevin van Zonneveld (http://kevin.vanzonneveld.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD Licence
 * @version   SVN: Release: $Id$
 * @link      http://trac.plutonia.nl/projects/system_daemon
 */

// Call System_DaemonTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "System_DaemonTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'System/Daemon.php';

/**
 * Test class for System_Daemon.
 * Generated by PHPUnit_Util_Skeleton on 2008-04-27 at 03:25:27.
 * Testing the daemon mechanism itself proves quite a challenge
 * because becoming a daemon also it impacts the PHPUnit test 
 * process. It fades to the background and cannot be retrieved.
 * 
 * So for now that testing can be done by using the examples. 
 * And some standalone tests are run here.
 *
 * @category  System
 * @package   System_Daemon
 * @author    Kevin van Zonneveld <kevin@vanzonneveld.net>
 * @copyright 2008 Kevin van Zonneveld (http://kevin.vanzonneveld.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD Licence
 * @version   SVN: Release: $Id$
 * @link      http://trac.plutonia.nl/projects/system_daemon
 * 
 */
class System_DaemonTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     *
     * @return void
     */
    public static function main() 
    {
        include_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("System_DaemonTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp() 
    {
        global $daemon;
        // Bare minimum setup
        $daemon               = new System_Daemon("testdaemon", true);
        $daemon->appDir       = dirname(__FILE__);
        $daemon->logVerbosity = 99; // so that the daemon can't log
        // Becoming a daemon breaks the PHPUnit test mechanism.
        //$daemon->start(); 
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown() 
    {
    }

    /**
     * Test function
     *
     * @return void
     */
    public function testDaemonInBackground() 
    {        
        global $daemon;
        $this->assertEquals(false, $daemon->daemonInBackground());
    }

    /**
     * Test function
     * 
     * @return void 
     */
    public function testLog() 
    {
        global $daemon;
        $this->assertEquals(true, $daemon->log(1, "test"));
    }
}

// Call System_DaemonTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "System_DaemonTest::main") {
    System_DaemonTest::main();
}
?>